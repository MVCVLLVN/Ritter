import datetime
import urllib3
import json
import re
import time
import psycopg2
import pandas as pd
from playwright.sync_api import sync_playwright
from typing import List, Tuple, Dict, Any
import json
import psycopg2


# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ urllib3
urllib3.disable_warnings()

db_config_path = r""

with open(db_config_path) as db_config_path:
    db_config = json.load(db_config_path)

new_name = {
    'In Home - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è': "In Home",
    'REV Ritter GmbH': "Ritter",
    '–≠–†–ê, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω': "–≠–†–ê",
    'LAMPLANDIA OFFICIAL STORE': "LAMPLANDIA",
    '"GAUSS" –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ú–ê–ì–ê–ó–ò–ù': "GAUSS",
    'Feron, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω': "Feron",
    '–¶–µ–Ω—Ç—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–∏–∫–∏ "–≠–ª–µ–∫—Ç—Ä–æ–º–∏—Ä"': "–≠–ª–µ–∫—Ç—Ä–æ–º–∏—Ä",
    '–û–û–û ¬´–ê–õ–ò–û–¢"': "–ê–õ–ò–û–¢",
    'MEGALIGHTMARKET –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è MEGALIGHT RUS': "MEGALIGHTMARKET",
    "–û–û–û ¬´–°—Ç—É–ª –ì—Ä—É–ø¬ª": '–°—Ç—É–ª –ì—Ä—É–ø'
}

my_category = {
    "CAT971434442": "–õ—é—Å—Ç—Ä–∞",
    "CAT504866302": "–°–ø–æ—Ç",
    "CAT970715573": "–§–∏—Ç–æ—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫",
    "CAT91309": "–õ–∞–º–ø–æ—á–∫–∞",
    "CAT504866303": "–¢—Ä–µ–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫",
    # "CAT91654": "–ü—Ä–æ–∂–µ–∫—Ç–æ—Ä",
    "CAT91653": "–ü–æ—Ç–æ–ª–æ—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫",
    "CAT91670": "–£–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫",
    "CAT94808": "–ö–ª–µ–º–º–∞",
    "CAT970943336": "–†–æ–∑–µ—Ç–∫–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º",
    # "CAT970743127": "–°–∞–¥–æ–≤–æ-–ø–∞—Ä–∫–æ–≤—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫",
}

all_data = {
    "CAT17028941": ["CAT504866302", "CAT971434442", "CAT970715573",
                    "CAT504866303", "CAT91653", "CAT91670"],
    "CAT17028609": ["CAT91309"],
    "CAT17028654": ["CAT94808", "CAT970943336"]
 }

user_data_path = r"C:\Users\m.troshin\PycharmProjects\Pp\get_ozon_competition_position\data_user"
url = "https://seller.ozon.ru/app/analytics/what-to-sell/competitive-position"


def update_db(data: List[Tuple]) -> None:

    def load_config(path: str) -> Dict[str, Any]:
        try:
            with open(path, 'r', encoding='utf-8') as config_file:
                return json.load(config_file)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_config_path: str = r""

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_config: Dict[str, Any] = load_config(db_config_path)

    # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    query: str = """
    INSERT INTO ozon.ozon_competitive_positionseller (share, revenue, speed, day, seller, category, position)
    VALUES 
        (%s, %s, %s, %s, %s, %s, %s)
    ON CONFLICT (seller, day, category) DO NOTHING;
    """

    print(data)  # –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with psycopg2.connect(**db_config) as connection:
            with connection.cursor() as cursor:
                # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                cursor.executemany(query, data)
                connection.commit()
                print("–î–∞–Ω–Ω—ã–µ –≤ –ë–î –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")

    except psycopg2.Error as db_err:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(db_err)
        raise


def get_previous_dates():
    today = datetime.datetime.now()
    yesterday = today - datetime.timedelta(days=1)
    yesterday_str = yesterday.strftime("%d.%m.%Y")
    bd_data = yesterday.strftime("%Y-%m-%d")
    return yesterday_str, bd_data


def transform_row(row, day, category):
    if len(row) != 1:
        row[0] = row[0].split("\n")
        position = row[0][0]
        seller = row[0][1]
        match = re.search(r'([\d\s\xa0]+)‚ÇΩ', row[2])

        if match:
            revenue = int(match.group(1).replace('\xa0', '').replace(' ', ''))

        match = re.search(r'[\d,]+', row[1])
        if match:
            share = float(match.group(0).replace(",", "."))

        match = re.search(r'[\d,]+', row[-1])
        if match:
            speed = float(match.group(0).replace(",", "."))

        if seller in new_name:
            seller = new_name.get(seller)
        seller = seller.upper()

        print("–û—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–≤–æ—Ä–º–∞–π—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", (share, revenue, speed, day, seller, category, position))
        return (share, revenue, speed, day, seller, category, position)


def login_with_saved_session():
    # –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è

    with sync_playwright() as p:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
        browser = p.chromium.launch_persistent_context(
            user_data_dir=user_data_path,
            headless=False,  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
            channel="chrome"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä Chrome
        )

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç
        page = browser.pages[0] if browser.pages else browser.new_page()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∞–π—Ç

        print(f"–û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç: {url}")
        page.goto(url, wait_until="load")

        transformed_rows = list()

        # –ñ–¥–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        page.wait_for_timeout(2000)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É

        # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        print("–ò—â—É –∏ –Ω–∞–∂–∏–º–∞—é –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º...")
        page.locator("button.link-module_linkBase_R4YRK").nth(1).click()  # –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É (–∏–Ω–¥–µ–∫—Å 1)

        # page.locator(f"button.calendar-day-module_day_3tyvM.calendar-day-module_calendarCell_1mCgU").nth(1).click()
        # aria_label_value = "14.01.2025"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ `aria-label`

        start, bd_data = get_previous_dates()

        # start = "20.03.2025"
        # bd_data = "2025-03-20"

        print(f"–ò—â—É –∫–Ω–æ–ø–∫—É —Åaria-label: {start}...")
        page.click(f"[aria-label='{start}']")  # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ

        print(f"–ò—â—É –∫–Ω–æ–ø–∫—É —Å aria-label: {start}...")
        page.click(f"[aria-label='{start}']")  # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ

        time.sleep(2)

        for title_2, lst in all_data.items():
            for title_3 in lst:
                print(title_2, title_3)
                # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
                page.locator("button.link-module_linkBase_R4YRK").nth(0).click()  # –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É (–∏–Ω–¥–µ–∫—Å 1)
                page.wait_for_timeout(1000)
                page.click("#CAT17027482")
                page.click(f"#{title_2}")
                page.click(f"#{title_3}")
                page.locator("button.custom-button_button_1Vyeq").click() # –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É (–∏–Ω–¥–µ–∫—Å 1)
                page.wait_for_timeout(2000)

                transformed_rows = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫

                try:
                    # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—É–≤–µ–ª–∏—á—å—Ç–µ timeout –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                    page.wait_for_selector("tr.table-row-module_row_tR-2M.table-row-module_hoverable_1BGOb",
                                           timeout=5000)

                    # –õ–æ–∫–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)
                    row_locator = page.locator("tr.table-row-module_row_tR-2M.table-row-module_hoverable_1BGOb")

                    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫
                    row_count = row_locator.count()
                    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {row_count}")

                    # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã
                    for i in range(row_count):
                        # –õ–æ–∫–∞—Ç–æ—Ä —è—á–µ–µ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
                        cells = row_locator.nth(i).locator("td")
                        cell_count = cells.count()

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —è—á–µ–µ–∫
                        row_data = [cells.nth(j).inner_text().strip() for j in range(cell_count)]

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        if not any(row_data):
                            continue

                        print(f" –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {row_data}")

                        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ `transform_row()`)
                        result = transform_row(row_data, bd_data, my_category.get(title_3))

                        if result:
                            transformed_rows.append(result)

                except Exception as e:
                    print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
                update_db(transformed_rows)

        browser.close()
        print(" –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")


if __name__ == "__main__":
    login_with_saved_session()
